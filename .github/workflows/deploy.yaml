name: Deploy Infra

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main
      - qa
      - dev
    # Uncomment and adjust paths if you only want the workflow to run
    # when specific files change.
    # paths:
    #   - infra/**
    #   - frontend/**
    #   - backend/**
    #   - .github/workflows/** # Keep this path if you uncomment others

permissions:
  id-token: write
  contents: read

jobs:

  prepare_backend:
    name: Deploy Backend
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    env:
      # Google Cloud Authentication Secrets (fetched from environment secrets)
      GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_MCP_SERVICE_ACCOUNT: ${{ secrets.GCP_MCP_SERVICE_ACCOUNT }}
      GCP_COMPUTE_SERVICE_ACCOUNT: ${{ secrets.GCP_COMPUTE_SERVICE_ACCOUNT }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Used for bucket project
      GCP_REGION: ${{ vars.GCP_REGION_CH }}

      # Dynamic Terraform State Bucket variable (includes branch name and project number secret)
      TF_STATE_BUCKET: terraform-state-${{ secrets.GCP_PROJECT_NUMBER }}
      ENVIRONMENT: ${{ github.ref_name }}

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Create Service Account
        id: create_sa
        run: |
          SA_NAME="archiefunct-${{ github.ref_name }}-mcp-sa"
          SA_EMAIL="${SA_NAME}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"

          if gcloud iam service-accounts describe $SA_EMAIL --project=${{ secrets.GCP_PROJECT_ID }} > /dev/null 2>&1; then
            echo "Service account $SA_EMAIL already exists. Skipping creation."
            echo "created=false" >> $GITHUB_OUTPUT
          else
            gcloud iam service-accounts create $SA_NAME \
              --description="Service Account for Cloud Functions" \
              --display-name="Cloud Functions SA" \
              --project="${{ secrets.GCP_PROJECT_ID }}"  # Explicitly specify project ID
            echo "created=true" >> $GITHUB_OUTPUT
          fi

      - name: Grant Terraform SA permission Compute Service account
        run: |
          COMPUTE_SA_EMAIL=${{ secrets.GCP_COMPUTE_SERVICE_ACCOUNT }}
          
          echo "Granting roles/iam.serviceAccountUser to ${{ env.GCP_SERVICE_ACCOUNT }} on ${COMPUTE_SA_EMAIL}"
          gcloud iam service-accounts add-iam-policy-binding "${COMPUTE_SA_EMAIL}" \
            --member="serviceAccount:${{ env.GCP_SERVICE_ACCOUNT }}" \
            --role="roles/iam.serviceAccountUser" \
            --project="${{ env.GCP_PROJECT_ID }}"

      - name: Grant MCP SA Permissions to Act As Terraform SA
        run: |
          gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ env.GCP_MCP_SERVICE_ACCOUNT }}" \
            --role="roles/iam.serviceAccountUser"

      - name: Grant Terraform SA Permission to Act As Cloud Function SA
        run: |
          SA_EMAIL="archiefunct-${{ github.ref_name }}-mcp-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          gcloud iam service-accounts add-iam-policy-binding $SA_EMAIL \
            --member="serviceAccount:${{ env.GCP_SERVICE_ACCOUNT }}" \
            --role="roles/iam.serviceAccountUser"

      - name: Grant permissions to SA for Cloud Functions
        run: |
          gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ env.GCP_SERVICE_ACCOUNT }}" \
            --role="roles/serviceusage.serviceUsageAdmin"
      
      - name: grant service account permissions
        run: |
          gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ env.GCP_SERVICE_ACCOUNT }}" \
            --role="roles/cloudfunctions.developer"

      - name: Grant Artifact Registry Repo Admin Role
        run: |
          gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ env.GCP_SERVICE_ACCOUNT }}" \
            --role="roles/artifactregistry.repoAdmin"

      - name: Activate Artifact Registry API
        run: |
          gcloud services enable artifactregistry.googleapis.com \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Create Artifact Registry Repository
        run: |
          REPO_NAME="archie-backend"
          if ! gcloud artifacts repositories describe $REPO_NAME --location=${{ vars.GCP_REGION_CH }} --project=${{ secrets.GCP_PROJECT_ID }} > /dev/null 2>&1; then
            echo "Artifact Registry repository $REPO_NAME does not exist. Creating..."
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=${{ vars.GCP_REGION_CH }} \
            --project=${{ secrets.GCP_PROJECT_ID }}
          else 
            echo "Artifact Registry repository $REPO_NAME already exists."
          fi
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # --- Terraform Backend Setup ---
      # This step ensures the GCS bucket for Terraform state exists before Terraform init
      - name: Ensure Terraform State Bucket Exists
        run: |
          # Assign shell variables from GitHub Actions contexts/environment
          # Using env variables set at the job level (except for REGION, directly from vars)
          BUCKET_NAME="${{ env.TF_STATE_BUCKET }}"
          PROJECT_ID="${{ env.GCP_PROJECT_ID }}"
          # Accessing vars.GCP_REGION_CH directly here as env.GCP_REGION was unstable in previous logs for this step
          REGION="${{ vars.GCP_REGION_CH }}"

          # Debugging output to check variable values (Recommended for troubleshooting)
          echo "--- Debugging Bucket Creation Variables ---"
          echo "Bucket Name: ${BUCKET_NAME}"
          echo "Project ID: ${PROJECT_ID}"
          echo "Region from vars.GCP_REGION_CH: ${{ vars.GCP_REGION_CH }}" # Print raw vars context value
          echo "Region shell variable value: ${REGION}" # Print the value assigned to the shell variable
          echo "------------------------------------------"

          # Check if the bucket exists
          if gcloud storage buckets describe "gs://${BUCKET_NAME}" --project="${PROJECT_ID}" > /dev/null 2>&1; then
            echo "Terraform state bucket gs://${BUCKET_NAME} already exists."
          else
            echo "Terraform state bucket gs://${BUCKET_NAME} does not exist. Creating..."
            # Create the bucket with uniform bucket-level access for security
            # Using the shell variables defined above
            gcloud storage buckets create "gs://${BUCKET_NAME}" \
              --project="${PROJECT_ID}" \
              --location="${REGION}" \
              --uniform-bucket-level-access

            if [ $? -eq 0 ]; then
              echo "Bucket gs://${BUCKET_NAME} created successfully."
            else
              echo "Error creating bucket gs://${BUCKET_NAME}."
              exit 1
            fi
          fi

  deploy_infra:
    name: Deploy Infrastructure
    needs: [prepare_backend]
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    env:
      GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ vars.GCP_REGION_CH }}

      # Dynamic Terraform State Bucket variable (includes branch name and project number secret)
      TF_STATE_BUCKET: terraform-state-${{ secrets.GCP_PROJECT_NUMBER }}
      ENVIRONMENT: ${{ github.ref_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform-state"
        working-directory: infra/

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/

      - name: Terraform Apply
        working-directory: infra/
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -var="location=${{ env.GCP_REGION }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var-file="${{ github.ref_name }}.tfvars" \
            -var="github_workspace=${{ github.workspace }}" \
            -var="github_sha=${{ github.sha }}"

  build_and_push_docker_image:
    name: Build and Push Docker Image
    needs: [deploy_infra]
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ vars.GCP_REGION_CH }}
      IMAGE_NAME: ${{ vars.GCP_REGION_CH }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/archie-backend:${{ github.sha }} # Tag with commit SHA
      ENVIRONMENT: ${{ github.ref_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ vars.GCP_REGION_CH }}-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} -f ./backend/Dockerfile ./backend/

      - name: Push Docker Image to Artifact Registry
        run: |
          docker push ${{ env.IMAGE_NAME }}